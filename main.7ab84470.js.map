{"version":3,"sources":["js/main.js"],"names":["selectElement","document","querySelector","formatDate","date","getFullYear","getMonth","slice","getDate","addEventListener","event","fetch","target","value","then","response","json","map","zippedStats","rest","attribute","flat","parsed","Tabulator","height","initialFilter","field","type","layout","groupBy","initialSort","column","dir","groupHeader","count","data","group","totalEarnings","forEach","item","amount","Date","Number","parseFloat","toPrecision","toFixed","columns","title","hozAlign","sorter","formatter","cell","formatterParams","onRendered","getValue","convertedDate","topCalc","values","calcParams","calc","totalTime","luxon","Duration","fromMillis","shiftTo","days","toFormat","substr","formatHumanSecondsDuration","topCalcParams","precision","topCalcFormatter","editor","headerFilter","topCalcFormatterParams","decimal","thousand","symbol","duration"],"mappings":"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","file":"main.7ab84470.js","sourceRoot":"..","sourcesContent":["const selectElement = document.querySelector(\"#dataset-url\");\n\nselectElement.addEventListener(\"change\", (event) => {\n    fetch(`${event.target.value}`)\n    .then((response) => response.json())\n    .then((json) => json.map(({zippedStats, ...rest}) => \n            zippedStats.map(attribute => ({...rest, ...attribute}))).flat())\n    .then(parsed => new Tabulator(\"#example-table\", {\n        height:311,\n        initialFilter : [\n            {field:\"amount\", type:\">\", value:\"0\"}\n        ],\n        layout:\"fitColumns\",\n        groupBy: \"periodStartedAt\",\n        initialSort:[\n            {column:\"periodStartedAt\", dir:\"desc\"}, //sort by this first\n        ],\n        groupHeader: function (value, count, data, group) {\n            let totalEarnings = 0;\n            data.forEach((item) => {\n                if (item.amount > 0) {\n                    totalEarnings += item.amount;\n                }\n            });\n    \n            return formatDate(new Date(Number(value))) + `- $${parseFloat(totalEarnings.toPrecision(3)).toFixed(2)}`;\n        },\n        columns: [\n            {title:\"Date\", field:\"periodStartedAt\", hozAlign:\"center\", sorter:\"number\", formatter: function (cell, formatterParams, onRendered) {\n                if (cell.getValue()) {\n                    let convertedDate = formatDate(new Date(Number(cell.getValue())));\n                    return convertedDate;\n                }}\n            },\n            {title:\"Title\", field:\"title\"},\n            {title:\"Name\", field:\"name\"},\n            {title:\"Link\", field:\"link\"},\n            {title:\"Views\", field:\"views\", topCalc: \"sum\"},\n            {title: \"Internal views\", field:\"internalReferrerViews\", topCalc: \"sum\"},\n            {title: \"Member time reading (s)\", field:\"memberTtr\",\n                topCalc: function (values, data, calcParams) {\n                    let calc = 0;\n                    values.forEach(function (value) {\n                        calc += value;\n                    });\n                    \n                    totalTime = luxon.Duration.fromMillis(calc * 1000).shiftTo('days', 'hours', 'minutes', 'seconds');\n        \n                    if (totalTime.days === 0) return totalTime.toFormat('hh:mm:ss');\n                    else return totalTime.days + 'd ' + totalTime.toFormat('d hh:mm:ss').substr(2);\n                },\n                formatter: formatHumanSecondsDuration,},\n            {title: \"Amount\", field:\"amount\", topCalc: \"sum\", topCalcParams: { precision: 2 },\n                topCalcFormatter: \"money\",\n                editor:\"input\", headerFilter:true,\n                topCalcFormatterParams: {\n                    decimal: \".\",\n                    thousand: \",\",\n                    symbol: \"$\",\n                    precision: 2,\n                },\n                formatter: \"money\",\n                formatterParams: {\n                    decimal: \".\",\n                    thousand: \",\",\n                    symbol: \"$\",\n                    precision: 2,\n                }},\n\n            \n        ],\n        data: parsed\n    }))\n\n});\n\nfunction formatDate(date) {\n    return date.getFullYear() + \"-\" +\n        ('0' + (date.getMonth() + 1)).slice(-2) + \"-\" +\n        ('0' + date.getDate()).slice(-2);\n}\n\n\nconst formatHumanSecondsDuration = function (cell) {\n    duration = luxon.Duration.fromMillis(cell.getValue() * 1000).shiftTo('days', 'hours', 'minutes', 'seconds');\n\n    if (duration.days === 0) {\n        return duration.toFormat('hh:mm:ss');\n    } else return duration.days + 'd ' + duration.toFormat('d hh:mm:ss').substr(2);\n}"]}