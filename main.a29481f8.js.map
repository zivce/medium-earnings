{"version":3,"sources":["js/main.js"],"names":["selectElement","document","querySelector","addEventListener","event","fetch","target","value","then","response","json","map","zippedStats","rest","attribute","flat","parse","console","log","parsed","Tabulator","height","layout","groupBy","initialSort","column","dir","columns","title","field","hozAlign","sorter","formatter","cell","formatterParams","onRendered","getValue","convertedDate","formatDate","Date","Number","topCalc","values","data","calcParams","calc","totalTime","forEach","luxon","Duration","fromMillis","shiftTo","days","toFormat","substr","formatHumanSecondsDuration","topCalcParams","precision","topCalcFormatter","topCalcFormatterParams","decimal","thousand","symbol","duration"],"mappings":"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","file":"main.a29481f8.js","sourceRoot":"..","sourcesContent":["const selectElement = document.querySelector(\"#dataset-url\");\n\nselectElement.addEventListener(\"change\", (event) => {\n    fetch(`${event.target.value}`)\n    .then((response) => response.json())\n    .then((json) => json.map(({zippedStats, ...rest}) => \n            zippedStats.map(attribute => ({...rest, ...attribute}))).flat())\n    .then(parse => {console.log(parse); return parse;})\n    .then(parsed => new Tabulator(\"#example-table\", {\n        height:311,\n        layout:\"fitColumns\",\n        groupBy: \"periodStartedAt\",\n        initialSort:[\n            {column:\"periodStartedAt\", dir:\"desc\"}, //sort by this first\n        ],\n        columns: [\n            {title:\"Date\", field:\"periodStartedAt\", hozAlign:\"center\", sorter:\"number\", formatter: function (cell, formatterParams, onRendered) {\n                if (cell.getValue()) {\n                    let convertedDate = formatDate(new Date(Number(cell.getValue())));\n                    return convertedDate;\n                }}\n            },\n            {title:\"Title\", field:\"title\"},\n            {title:\"Name\", field:\"name\"},\n            {title:\"Link\", field:\"link\"},\n            {title:\"Views\", field:\"views\", topCalc: \"sum\"},\n            {title: \"Internal views\", field:\"internalReferrerViews\", topCalc: \"sum\"},\n            {title: \"Member time reading (s)\", field:\"memberTtr\",\n                topCalc: function (values, data, calcParams) {\n                    let calc = 0;\n                    values.forEach(function (value) {\n                        calc += value;\n                    });\n                    \n                    totalTime = luxon.Duration.fromMillis(calc * 1000).shiftTo('days', 'hours', 'minutes', 'seconds');\n        \n                    if (totalTime.days === 0) return totalTime.toFormat('hh:mm:ss');\n                    else return totalTime.days + 'd ' + totalTime.toFormat('d hh:mm:ss').substr(2);\n                },\n                formatter: formatHumanSecondsDuration,},\n            {title: \"Amount\", field:\"amount\", topCalc: \"sum\", topCalcParams: { precision: 2 },\n                topCalcFormatter: \"money\",\n                topCalcFormatterParams: {\n                    decimal: \".\",\n                    thousand: \",\",\n                    symbol: \"$\",\n                    precision: 2,\n                },\n                formatter: \"money\",\n                formatterParams: {\n                    decimal: \".\",\n                    thousand: \",\",\n                    symbol: \"$\",\n                    precision: 2,\n                }},\n\n            \n        ],\n        data: parsed\n    }))\n\n});\n\nconst formatHumanSecondsDuration = function (cell) {\n    duration = luxon.Duration.fromMillis(cell.getValue() * 1000).shiftTo('days', 'hours', 'minutes', 'seconds');\n\n    if (duration.days === 0) {\n        return duration.toFormat('hh:mm:ss');\n    } else return duration.days + 'd ' + duration.toFormat('d hh:mm:ss').substr(2);\n}"]}